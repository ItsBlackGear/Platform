plugins {
    id "com.github.johnrengelman.shadow"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    implementation('com.electronwill.night-config:core:3.6.0')
    shadowBundle('com.electronwill.night-config:core:3.6.0')

    implementation('com.electronwill.night-config:toml:3.6.0')
    shadowBundle('com.electronwill.night-config:toml:3.6.0')

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ":common", configuration: "transformProductionFabric")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    relocate "com.electronwill.nightconfig", "com.blackgear.platform.nightconfig"
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier = null
}

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:${project.fabric_loader_version}")
    }
}