plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = "${rootProject.archivesBaseName}-Forge"

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig "platform-common.mixins.json"
        mixinConfig "platform.mixins.json"

        convertAccessWideners.set(true)
        extraAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    forgeRuntimeLibrary implementation("io.github.LlamaLad7:MixinExtras:0.1.0-rc5")
    shadowCommon("io.github.LlamaLad7:MixinExtras:0.1.0-rc5")
    annotationProcessor("io.github.LlamaLad7:MixinExtras:0.1.0-rc5")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    relocate "com.llamalad7.mixinextras", "com.blackgear.platform.mixinextras"
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
